
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000560  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000083  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000090e  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013b  00000000  00000000  00000f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008d3  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e0  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003f0  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f8  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  74:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <start>:
return (0);
}	


void start()
	{
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
									/* starting of the code with blinking nine times */
		for(i=0;i<9;i++)
		{
			PORTA=0X0F;
  80:	6f e0       	ldi	r22, 0x0F	; 15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	49 e1       	ldi	r20, 0x19	; 25
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	14 c0       	rjmp	.+40     	; 0xb0 <start+0x34>
  88:	6b bb       	out	0x1b, r22	; 27
			PORTC=0X0F;
  8a:	65 bb       	out	0x15, r22	; 21
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	97 e2       	ldi	r25, 0x27	; 39
  90:	fa 01       	movw	r30, r20
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <start+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <start+0x14>
			_delay_ms(1000);
			PORTA=0X00;
  9a:	1b ba       	out	0x1b, r1	; 27
			PORTC=0X00;
  9c:	15 ba       	out	0x15, r1	; 21
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	97 e2       	ldi	r25, 0x27	; 39
  a2:	fa 01       	movw	r30, r20
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <start+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  aa:	d9 f7       	brne	.-10     	; 0xa2 <start+0x26>
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255


void start()
	{
									/* starting of the code with blinking nine times */
		for(i=0;i<9;i++)
  b0:	29 30       	cpi	r18, 0x09	; 9
  b2:	31 05       	cpc	r19, r1
  b4:	4c f3       	brlt	.-46     	; 0x88 <start+0xc>
  b6:	30 93 61 00 	sts	0x0061, r19
  ba:	20 93 60 00 	sts	0x0060, r18
			_delay_ms(1000);
			PORTA=0X00;
			PORTC=0X00;
			_delay_ms(1000);
		}
	}
  be:	08 95       	ret

000000c0 <zoomin>:
	
void zoomin()
	{
									/* zoom in for nine times */
			PORTA=0x01;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
  cc:	29 e1       	ldi	r18, 0x19	; 25
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <zoomin+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <zoomin+0x10>
			_delay_ms(1000);
			PORTA=0x02;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	97 e2       	ldi	r25, 0x27	; 39
  e6:	29 e1       	ldi	r18, 0x19	; 25
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <zoomin+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <zoomin+0x2a>
			_delay_ms(1000);
			PORTA=0x04;
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	97 e2       	ldi	r25, 0x27	; 39
 100:	29 e1       	ldi	r18, 0x19	; 25
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <zoomin+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10c:	d9 f7       	brne	.-10     	; 0x104 <zoomin+0x44>
			_delay_ms(1000);
			PORTA=0x08;
 10e:	88 e0       	ldi	r24, 0x08	; 8
 110:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	85 bb       	out	0x15, r24	; 21
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	97 e2       	ldi	r25, 0x27	; 39
 11a:	29 e1       	ldi	r18, 0x19	; 25
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <zoomin+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <zoomin+0x5e>
			_delay_ms(1000);
	}
 128:	08 95       	ret

0000012a <shift>:
	
void shift()
	{
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
									/* shift to new pattern */
		for(i=0;i<3;i++)
		{
			PORTA=0x0f;
 12e:	6f e0       	ldi	r22, 0x0F	; 15
 130:	49 e1       	ldi	r20, 0x19	; 25
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	14 c0       	rjmp	.+40     	; 0x15e <shift+0x34>
 136:	6b bb       	out	0x1b, r22	; 27
			PORTC=0x0f;
 138:	65 bb       	out	0x15, r22	; 21
 13a:	80 e1       	ldi	r24, 0x10	; 16
 13c:	97 e2       	ldi	r25, 0x27	; 39
 13e:	fa 01       	movw	r30, r20
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <shift+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <shift+0x14>
			_delay_ms(1000);
			PORTA=0x00;
 148:	1b ba       	out	0x1b, r1	; 27
			PORTC=0x00;
 14a:	15 ba       	out	0x15, r1	; 21
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	fa 01       	movw	r30, r20
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <shift+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 156:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 158:	d9 f7       	brne	.-10     	; 0x150 <shift+0x26>
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
void shift()
	{
									/* shift to new pattern */
		for(i=0;i<3;i++)
 15e:	23 30       	cpi	r18, 0x03	; 3
 160:	31 05       	cpc	r19, r1
 162:	4c f3       	brlt	.-46     	; 0x136 <shift+0xc>
 164:	30 93 61 00 	sts	0x0061, r19
 168:	20 93 60 00 	sts	0x0060, r18
			_delay_ms(1000);
			PORTA=0x00;
			PORTC=0x00;
			_delay_ms(1000);
		}
	}
 16c:	08 95       	ret

0000016e <zoomout>:
	
void zoomout()
									/* zoomout for nine times */ 
	{
			PORTA=0x08;
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
 172:	8f e0       	ldi	r24, 0x0F	; 15
 174:	85 bb       	out	0x15, r24	; 21
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	97 e2       	ldi	r25, 0x27	; 39
 17a:	29 e1       	ldi	r18, 0x19	; 25
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <zoomout+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <zoomout+0x10>
			_delay_ms(1000);
			PORTA=0x04;
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
 18c:	8f e0       	ldi	r24, 0x0F	; 15
 18e:	85 bb       	out	0x15, r24	; 21
 190:	80 e1       	ldi	r24, 0x10	; 16
 192:	97 e2       	ldi	r25, 0x27	; 39
 194:	29 e1       	ldi	r18, 0x19	; 25
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <zoomout+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	d9 f7       	brne	.-10     	; 0x198 <zoomout+0x2a>
			_delay_ms(1000);
			PORTA=0x02;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	97 e2       	ldi	r25, 0x27	; 39
 1ae:	29 e1       	ldi	r18, 0x19	; 25
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <zoomout+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ba:	d9 f7       	brne	.-10     	; 0x1b2 <zoomout+0x44>
			_delay_ms(1000);
			PORTA=0x01;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8b bb       	out	0x1b, r24	; 27
			PORTC=0x0f;
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	97 e2       	ldi	r25, 0x27	; 39
 1c8:	29 e1       	ldi	r18, 0x19	; 25
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <zoomout+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <zoomout+0x5e>
			_delay_ms(1000);
	}	
 1d6:	08 95       	ret

000001d8 <inout>:
	
void inout()
									/* lights the inner and outer part */
	{
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<3;i++)
		{
			PORTA=0x09;
 1dc:	79 e0       	ldi	r23, 0x09	; 9
			PORTC=0x0f;
 1de:	6f e0       	ldi	r22, 0x0F	; 15
 1e0:	49 e1       	ldi	r20, 0x19	; 25
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <inout+0x24>
void inout()
									/* lights the inner and outer part */
	{
		for(i=0;i<3;i++)
		{
			PORTA=0x09;
 1e6:	7b bb       	out	0x1b, r23	; 27
			PORTC=0x0f;
 1e8:	65 bb       	out	0x15, r22	; 21
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	97 e2       	ldi	r25, 0x27	; 39
 1ee:	fa 01       	movw	r30, r20
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <inout+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <inout+0x16>
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
	}	
	
void inout()
									/* lights the inner and outer part */
	{
		for(i=0;i<3;i++)
 1fc:	23 30       	cpi	r18, 0x03	; 3
 1fe:	31 05       	cpc	r19, r1
 200:	94 f3       	brlt	.-28     	; 0x1e6 <inout+0xe>
 202:	30 93 61 00 	sts	0x0061, r19
 206:	20 93 60 00 	sts	0x0060, r18
		{
			PORTA=0x09;
			PORTC=0x0f;
			_delay_ms(1000);
		}
	}
 20a:	08 95       	ret

0000020c <middle>:
	
void middle()
									/* lights the middle two squares */
	{
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<3;i++)
		{
			PORTA=0x06;
 210:	76 e0       	ldi	r23, 0x06	; 6
			PORTC=0x0f;
 212:	6f e0       	ldi	r22, 0x0F	; 15
 214:	49 e1       	ldi	r20, 0x19	; 25
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0b c0       	rjmp	.+22     	; 0x230 <middle+0x24>
void middle()
									/* lights the middle two squares */
	{
		for(i=0;i<3;i++)
		{
			PORTA=0x06;
 21a:	7b bb       	out	0x1b, r23	; 27
			PORTC=0x0f;
 21c:	65 bb       	out	0x15, r22	; 21
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	97 e2       	ldi	r25, 0x27	; 39
 222:	fa 01       	movw	r30, r20
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <middle+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 228:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22a:	d9 f7       	brne	.-10     	; 0x222 <middle+0x16>
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
void middle()
									/* lights the middle two squares */
	{
		for(i=0;i<3;i++)
 230:	23 30       	cpi	r18, 0x03	; 3
 232:	31 05       	cpc	r19, r1
 234:	94 f3       	brlt	.-28     	; 0x21a <middle+0xe>
 236:	30 93 61 00 	sts	0x0061, r19
 23a:	20 93 60 00 	sts	0x0060, r18
		{
			PORTA=0x06;
			PORTC=0x0f;
			_delay_ms(1000);
		}
	}
 23e:	08 95       	ret

00000240 <even>:
	
void even()
									/* lights the even squares */
	{
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<4;i++)
		{
			PORTA=0x0A;
 244:	7a e0       	ldi	r23, 0x0A	; 10
			PORTC=0x0f;
 246:	6f e0       	ldi	r22, 0x0F	; 15
 248:	49 e1       	ldi	r20, 0x19	; 25
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	0b c0       	rjmp	.+22     	; 0x264 <even+0x24>
void even()
									/* lights the even squares */
	{
		for(i=0;i<4;i++)
		{
			PORTA=0x0A;
 24e:	7b bb       	out	0x1b, r23	; 27
			PORTC=0x0f;
 250:	65 bb       	out	0x15, r22	; 21
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	97 e2       	ldi	r25, 0x27	; 39
 256:	fa 01       	movw	r30, r20
 258:	31 97       	sbiw	r30, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <even+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 25c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25e:	d9 f7       	brne	.-10     	; 0x256 <even+0x16>
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
void even()
									/* lights the even squares */
	{
		for(i=0;i<4;i++)
 264:	24 30       	cpi	r18, 0x04	; 4
 266:	31 05       	cpc	r19, r1
 268:	94 f3       	brlt	.-28     	; 0x24e <even+0xe>
 26a:	30 93 61 00 	sts	0x0061, r19
 26e:	20 93 60 00 	sts	0x0060, r18
		{
			PORTA=0x0A;
			PORTC=0x0f;
			_delay_ms(1000);
		}
	}
 272:	08 95       	ret

00000274 <odd>:
	
void odd()
									/* lights the odd squares */
	{
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<4;i++)
		{
			PORTA=0x05;
 278:	75 e0       	ldi	r23, 0x05	; 5
			PORTC=0x0f;
 27a:	6f e0       	ldi	r22, 0x0F	; 15
 27c:	49 e1       	ldi	r20, 0x19	; 25
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	0b c0       	rjmp	.+22     	; 0x298 <odd+0x24>
void odd()
									/* lights the odd squares */
	{
		for(i=0;i<4;i++)
		{
			PORTA=0x05;
 282:	7b bb       	out	0x1b, r23	; 27
			PORTC=0x0f;
 284:	65 bb       	out	0x15, r22	; 21
 286:	80 e1       	ldi	r24, 0x10	; 16
 288:	97 e2       	ldi	r25, 0x27	; 39
 28a:	fa 01       	movw	r30, r20
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <odd+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 290:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	d9 f7       	brne	.-10     	; 0x28a <odd+0x16>
 294:	2f 5f       	subi	r18, 0xFF	; 255
 296:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
void odd()
									/* lights the odd squares */
	{
		for(i=0;i<4;i++)
 298:	24 30       	cpi	r18, 0x04	; 4
 29a:	31 05       	cpc	r19, r1
 29c:	94 f3       	brlt	.-28     	; 0x282 <odd+0xe>
 29e:	30 93 61 00 	sts	0x0061, r19
 2a2:	20 93 60 00 	sts	0x0060, r18
		{
			PORTA=0x05;
			PORTC=0x0f;
			_delay_ms(1000);
		}
	}
 2a6:	08 95       	ret

000002a8 <side>:
	
void side()
									/* shifts between sides */
	{
		PORTA=0x0f;
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x01;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	85 bb       	out	0x15, r24	; 21
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	97 e2       	ldi	r25, 0x27	; 39
 2b4:	29 e1       	ldi	r18, 0x19	; 25
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <side+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <side+0x10>
		_delay_ms(1000);
		PORTA=0x0f;
 2c2:	8f e0       	ldi	r24, 0x0F	; 15
 2c4:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x02;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	85 bb       	out	0x15, r24	; 21
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	97 e2       	ldi	r25, 0x27	; 39
 2ce:	29 e1       	ldi	r18, 0x19	; 25
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <side+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2da:	d9 f7       	brne	.-10     	; 0x2d2 <side+0x2a>
		_delay_ms(1000);
		PORTA=0x0f;
 2dc:	8f e0       	ldi	r24, 0x0F	; 15
 2de:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x04;
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	85 bb       	out	0x15, r24	; 21
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	97 e2       	ldi	r25, 0x27	; 39
 2e8:	29 e1       	ldi	r18, 0x19	; 25
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <side+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <side+0x44>
		_delay_ms(1000);
		PORTA=0x0f;	
 2f6:	8f e0       	ldi	r24, 0x0F	; 15
 2f8:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x0f;
 2fa:	85 bb       	out	0x15, r24	; 21
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	97 e2       	ldi	r25, 0x27	; 39
 300:	29 e1       	ldi	r18, 0x19	; 25
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	f9 01       	movw	r30, r18
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <side+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30c:	d9 f7       	brne	.-10     	; 0x304 <side+0x5c>
		_delay_ms(1000);
		PORTA=0x00;
 30e:	1b ba       	out	0x1b, r1	; 27
		PORTC=0x00;
 310:	15 ba       	out	0x15, r1	; 21
 312:	80 e1       	ldi	r24, 0x10	; 16
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	29 e1       	ldi	r18, 0x19	; 25
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <side+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 320:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 322:	d9 f7       	brne	.-10     	; 0x31a <side+0x72>
		_delay_ms(1000);
		PORTA=0x0f;
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x04;
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	85 bb       	out	0x15, r24	; 21
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	97 e2       	ldi	r25, 0x27	; 39
 330:	29 e1       	ldi	r18, 0x19	; 25
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <side+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33c:	d9 f7       	brne	.-10     	; 0x334 <side+0x8c>
		_delay_ms(1000);
		PORTA=0x0f;
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x02;
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	85 bb       	out	0x15, r24	; 21
 346:	80 e1       	ldi	r24, 0x10	; 16
 348:	97 e2       	ldi	r25, 0x27	; 39
 34a:	29 e1       	ldi	r18, 0x19	; 25
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <side+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 354:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 356:	d9 f7       	brne	.-10     	; 0x34e <side+0xa6>
		_delay_ms(1000);
		PORTA=0x0f;
 358:	8f e0       	ldi	r24, 0x0F	; 15
 35a:	8b bb       	out	0x1b, r24	; 27
		PORTC=0x01;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	85 bb       	out	0x15, r24	; 21
 360:	80 e1       	ldi	r24, 0x10	; 16
 362:	97 e2       	ldi	r25, 0x27	; 39
 364:	29 e1       	ldi	r18, 0x19	; 25
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	f9 01       	movw	r30, r18
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <side+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 370:	d9 f7       	brne	.-10     	; 0x368 <side+0xc0>
		_delay_ms(1000);
	}	
 372:	08 95       	ret

00000374 <end>:
		
void end()
	{
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
		for(i=0;i<9;i++)
		{
			PORTA=0x0f;
 378:	6f e0       	ldi	r22, 0x0F	; 15
 37a:	49 e1       	ldi	r20, 0x19	; 25
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	14 c0       	rjmp	.+40     	; 0x3a8 <end+0x34>
 380:	6b bb       	out	0x1b, r22	; 27
			PORTC=0x0f;
 382:	65 bb       	out	0x15, r22	; 21
 384:	88 e8       	ldi	r24, 0x88	; 136
 386:	93 e1       	ldi	r25, 0x13	; 19
 388:	fa 01       	movw	r30, r20
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <end+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 38e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 390:	d9 f7       	brne	.-10     	; 0x388 <end+0x14>
			_delay_ms(500);
			PORTA=0x00;
 392:	1b ba       	out	0x1b, r1	; 27
			PORTC=0x00;
 394:	15 ba       	out	0x15, r1	; 21
 396:	88 e8       	ldi	r24, 0x88	; 136
 398:	93 e1       	ldi	r25, 0x13	; 19
 39a:	fa 01       	movw	r30, r20
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <end+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3a2:	d9 f7       	brne	.-10     	; 0x39a <end+0x26>
 3a4:	2f 5f       	subi	r18, 0xFF	; 255
 3a6:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_ms(1000);
	}	
		
void end()
	{
		for(i=0;i<9;i++)
 3a8:	29 30       	cpi	r18, 0x09	; 9
 3aa:	31 05       	cpc	r19, r1
 3ac:	4c f3       	brlt	.-46     	; 0x380 <end+0xc>
 3ae:	30 93 61 00 	sts	0x0061, r19
 3b2:	20 93 60 00 	sts	0x0060, r18
			_delay_ms(500);
			PORTA=0x00;
			PORTC=0x00;
			_delay_ms(500);
		}
	}
 3b6:	08 95       	ret

000003b8 <main>:
void side(void);
void end(void);

int main()
{
	DDRA=0X0F;
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	8a bb       	out	0x1a, r24	; 26
	DDRC=0X0F;
 3bc:	84 bb       	out	0x14, r24	; 20
	
	
	while(1)
	{	
		start();
 3be:	0e 94 3e 00 	call	0x7c	; 0x7c <start>
		for(i=0;i<4;i++)
 3c2:	10 92 61 00 	sts	0x0061, r1
 3c6:	10 92 60 00 	sts	0x0060, r1
 3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <main+0x2a>
		{
			zoomin();
 3cc:	0e 94 60 00 	call	0xc0	; 0xc0 <zoomin>
	
	
	while(1)
	{	
		start();
		for(i=0;i<4;i++)
 3d0:	80 91 60 00 	lds	r24, 0x0060
 3d4:	90 91 61 00 	lds	r25, 0x0061
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	90 93 61 00 	sts	0x0061, r25
 3de:	80 93 60 00 	sts	0x0060, r24
 3e2:	80 91 60 00 	lds	r24, 0x0060
 3e6:	90 91 61 00 	lds	r25, 0x0061
 3ea:	04 97       	sbiw	r24, 0x04	; 4
 3ec:	7c f3       	brlt	.-34     	; 0x3cc <main+0x14>
		{
			zoomin();
		}
		shift();
 3ee:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		for(i=0;i<4;i++)
 3f2:	10 92 61 00 	sts	0x0061, r1
 3f6:	10 92 60 00 	sts	0x0060, r1
 3fa:	0b c0       	rjmp	.+22     	; 0x412 <main+0x5a>
		{
			zoomout();
 3fc:	0e 94 b7 00 	call	0x16e	; 0x16e <zoomout>
		for(i=0;i<4;i++)
		{
			zoomin();
		}
		shift();
		for(i=0;i<4;i++)
 400:	80 91 60 00 	lds	r24, 0x0060
 404:	90 91 61 00 	lds	r25, 0x0061
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 61 00 	sts	0x0061, r25
 40e:	80 93 60 00 	sts	0x0060, r24
 412:	80 91 60 00 	lds	r24, 0x0060
 416:	90 91 61 00 	lds	r25, 0x0061
 41a:	04 97       	sbiw	r24, 0x04	; 4
 41c:	7c f3       	brlt	.-34     	; 0x3fc <main+0x44>
		{
			zoomout();
		}
		shift();
 41e:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		for(i=0;i<9;i++)
 422:	10 92 61 00 	sts	0x0061, r1
 426:	10 92 60 00 	sts	0x0060, r1
 42a:	0d c0       	rjmp	.+26     	; 0x446 <main+0x8e>
		{
			zoomin();
 42c:	0e 94 60 00 	call	0xc0	; 0xc0 <zoomin>
			zoomout();
 430:	0e 94 b7 00 	call	0x16e	; 0x16e <zoomout>
		for(i=0;i<4;i++)
		{
			zoomout();
		}
		shift();
		for(i=0;i<9;i++)
 434:	80 91 60 00 	lds	r24, 0x0060
 438:	90 91 61 00 	lds	r25, 0x0061
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	90 93 61 00 	sts	0x0061, r25
 442:	80 93 60 00 	sts	0x0060, r24
 446:	80 91 60 00 	lds	r24, 0x0060
 44a:	90 91 61 00 	lds	r25, 0x0061
 44e:	09 97       	sbiw	r24, 0x09	; 9
 450:	6c f3       	brlt	.-38     	; 0x42c <main+0x74>
		{
			zoomin();
			zoomout();
		}
		shift();
 452:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		odd();
 456:	0e 94 3a 01 	call	0x274	; 0x274 <odd>
		shift();
 45a:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		even();
 45e:	0e 94 20 01 	call	0x240	; 0x240 <even>
		shift();
 462:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		for(i=0;i<4;i++)
 466:	10 92 61 00 	sts	0x0061, r1
 46a:	10 92 60 00 	sts	0x0060, r1
 46e:	0d c0       	rjmp	.+26     	; 0x48a <main+0xd2>
		{
			odd();
 470:	0e 94 3a 01 	call	0x274	; 0x274 <odd>
			even();
 474:	0e 94 20 01 	call	0x240	; 0x240 <even>
		shift();
		odd();
		shift();
		even();
		shift();
		for(i=0;i<4;i++)
 478:	80 91 60 00 	lds	r24, 0x0060
 47c:	90 91 61 00 	lds	r25, 0x0061
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 61 00 	sts	0x0061, r25
 486:	80 93 60 00 	sts	0x0060, r24
 48a:	80 91 60 00 	lds	r24, 0x0060
 48e:	90 91 61 00 	lds	r25, 0x0061
 492:	04 97       	sbiw	r24, 0x04	; 4
 494:	6c f3       	brlt	.-38     	; 0x470 <main+0xb8>
		{
			odd();
			even();
		}
		shift();
 496:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		inout();
 49a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <inout>
		shift();
 49e:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		middle();
 4a2:	0e 94 06 01 	call	0x20c	; 0x20c <middle>
		shift();
 4a6:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		for(i=0;i<4;i++)
 4aa:	10 92 61 00 	sts	0x0061, r1
 4ae:	10 92 60 00 	sts	0x0060, r1
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <main+0x116>
		{
			inout();
 4b4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <inout>
			middle();
 4b8:	0e 94 06 01 	call	0x20c	; 0x20c <middle>
		shift();
		inout();
		shift();
		middle();
		shift();
		for(i=0;i<4;i++)
 4bc:	80 91 60 00 	lds	r24, 0x0060
 4c0:	90 91 61 00 	lds	r25, 0x0061
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	90 93 61 00 	sts	0x0061, r25
 4ca:	80 93 60 00 	sts	0x0060, r24
 4ce:	80 91 60 00 	lds	r24, 0x0060
 4d2:	90 91 61 00 	lds	r25, 0x0061
 4d6:	04 97       	sbiw	r24, 0x04	; 4
 4d8:	6c f3       	brlt	.-38     	; 0x4b4 <main+0xfc>
		{
			inout();
			middle();
		}
		shift();
 4da:	0e 94 95 00 	call	0x12a	; 0x12a <shift>
		side();
 4de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <side>
		end();
 4e2:	0e 94 ba 01 	call	0x374	; 0x374 <end>
 4e6:	6b cf       	rjmp	.-298    	; 0x3be <main+0x6>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
